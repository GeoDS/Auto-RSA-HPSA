# -*- coding: utf-8 -*-import arcpyimport matharcpy.env.OverwriteOutput = Trueclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Mental High Needs Scoring with RSA"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Mental High Needs HPSA (Psy only)"        self.description = "Calculate the score for each RSA"        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #first parameter        param0 = arcpy.Parameter(        displayName="RSA",        name="rsa",        datatype="GPFeatureLayer",        parameterType="Required",        direction="Input")                param1 = arcpy.Parameter(        displayName="output_name",        name="rsa_scores",        datatype="GPFeatureLayer",        parameterType="Required",        direction="Output")                params = [param0, param1]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        rsa = parameters[0].valueAsText        outfeature = parameters[1].valueAsText        #find the correct name for all fields        field_names = [f.name for f in arcpy.ListFields(rsa)]        field_names_str = ' '.join(field_names)        arcpy.AddMessage("Field names: {}.".format(field_names_str))        def add_underscore(field):            return field.replace(' ', '_')                    for name in field_names:            arcpy.AddMessage(name)            if 'poverty' in name:                poverty = name                poverty = add_underscore(poverty)                continue            if 'pop' in name and 'lwinc' not in name and 'water' not in name:                pop = name                pop = add_underscore(pop)            if 'clusterid' in name or 'hsanum' in name:                clusterid = name                clusterid = add_underscore(clusterid)            if 'mental_time' in name:                time = name                time = add_underscore(time)            if 'mental_distance' in name:                distance = name                distance = add_underscore(distance)            if 'core_fte' in name:                core_fte = name                core_fte = add_underscore(core_fte)                arcpy.AddMessage(core_fte)            if 'psy_fte' in name:                psy_fte = name                psy_fte = add_underscore(psy_fte)                arcpy.AddMessage(psy_fte)            if 'youth' in name:                youth = name                youth = add_underscore(youth)            if 'elderly' in name:                elderly = name                elderly = add_underscore(elderly)            if 'adults' in name:                adults = name                adults = add_underscore(adults)            if 'alcohol' in name:                alcohol = name                alcohol = add_underscore(alcohol)            if 'substance' in name:                substance = name                substance = add_underscore(substance)            if 'CA_constraint' in name:                ca_constraint = name                        #arcpy.CopyFeatures_management(joined_feature, outfeature)        arcpy.management.CopyFeatures(rsa, outfeature)                #calculate the first scoring criteria        #fieldname1 = "core_pop"        #arcpy.AddField_management(outfeature, fieldname1 , "FLOAT", 18, 11)        fieldname2 = "psy_pop"        arcpy.AddField_management(outfeature, fieldname2 , "FLOAT", 18, 11)        fieldname3 = "pop_score"        arcpy.AddField_management(outfeature, fieldname3 , "SHORT")        field_names = [f.name for f in arcpy.ListFields(outfeature)]        arcpy.AddMessage(field_names)        if '_' not in field_names:            pop = pop.replace('.', '_')            #core_fte = core_fte.replace('.', '_')            psy_fte = psy_fte.replace('.', '_')##        expression1 = "ratio(!" + pop + "!,!" + core_fte + "!)"##        codeblock1 = """def ratio(pop, core):##            if core is None or core == 0:##                return 0##            elif core > 0:##                return pop/core##                """                  ##        arcpy.CalculateField_management(outfeature, fieldname1, expression1, "PYTHON3", codeblock1)        expression2 = "ratio(!" + pop + "!,!" + psy_fte + "!)"                codeblock2 = """def ratio(pop, psy):            if psy is None or psy == 0:                return -999            elif psy > 0:                return pop/psy                """                          arcpy.CalculateField_management(outfeature, fieldname2, expression2, "PYTHON3", codeblock2)        expression3 = "pop_fte_score(!" + pop + "!,!psy_pop!)"        codeblock3 = """def pop_fte_score(pop, psy):##            if core == 0 and psy == 0:##                if pop >= 1500 and pop < 3000:##                    return 1##                elif pop >= 3000 and pop < 4500:##                    return 2##                elif pop >= 4500 and pop < 6000:##                    return 3           ##                elif pop >= 6000 and pop < 7500:##                    return 4           ##                elif pop >= 7500 and pop < 9000:##                    return 5##                elif pop >= 9000 and pop < 12000:##                    return 6           ##                elif pop >= 12000 and pop < 15000:##                    return 7##                else:##                    return 0            if psy == -999:                if pop >= 3000:                    if pop < 4500:                        return 2                    elif pop < 6000:                        return 3                    elif pop < 7500:                        return 4                    elif pop < 9000:                        return 5                    elif pop < 12000:                        return 6                    else:                        return 7                else:                    return 0            if psy > 0:                if psy >= 20000 and psy < 25000:                    return 1                elif psy >= 25000 and psy < 30000:                    return 2                elif psy >= 30000 and psy < 35000:                    return 3                elif psy >= 35000 and psy < 40000:                    return 4                elif psy >= 40000 and psy < 45000:                    return 5                elif psy >= 45000 and psy < 50000:                    return 6                elif psy >= 50000:                    return 7                else:                    return 0            return 0##            elif core > 0 and psy == 0:##                if core >= 6000 and core < 7500:##                    return 1##                elif core >= 7500 and core < 9000:##                    return 2##                elif core >= 9000 and core < 12000:##                    return 3##                elif core >= 12000 and core < 15000:##                    return 4##                elif core >= 15000 and core < 18000:##                    return 5##                elif core >= 18000 and core < 24000:##                    return 6##                elif core >= 24000:##                    return 7##                else:##                    return 0##            else:##                core_range = [0, 4500, 6000, 7500, 9000, 12000, 15000, 18000]##                psy_range = [0, 15000, 20000, 25000, 30000, 35000, 40000, 45000]##                idx1, idx2 = 0, 0##                for i in range(len(core_range), -1):##                    if core >= core_range[i]:##                        idx1 = i##                        break##                for j in range(len(psy_range), -1):##                    if psy >= psy_range[j]:##                        idx2 = j##                        break####                score_mx = []##                for k in range(len(core_range)-1):##                    row = list(range(k+1, 7)) + [7]*(k+1)##                    score_mx.append(row)                    ##                               ##                if idx1 == 0 or idx2 == 0:##                    return 0##                else:##                    return score_mx[idx1-1][idx2-1]                """        arcpy.CalculateField_management(outfeature, fieldname3, expression3, "PYTHON3", codeblock3)                fieldname4 = "poverty_ratio"        fieldname5 = "poverty_score"        arcpy.AddField_management(outfeature, fieldname4 , "DOUBLE", 18,11)        arcpy.AddField_management(outfeature, fieldname5 , "SHORT")        if '_' not in field_names:            poverty = poverty.replace('.', '_')                    expression4 = "ratio(!" + pop + "!,!" + poverty + "!)"        codeblock4 = """def ratio(pop_int, poverty):            if pop_int == 0 or pop_int == None:                return 0            else:                value = poverty/pop_int                return value """        arcpy.CalculateField_management(outfeature, fieldname4, expression4, "PYTHON3", codeblock4)        expression5 = "rate(!poverty_ratio!)"        codeblock5 = """def rate(poverty_float):            poverty_float = poverty_float*100            if poverty_float >= 50:                return 5            elif poverty_float >= 40:                return 4            elif poverty_float >= 30:                return 3            elif poverty_float >= 20:                return 2            elif poverty_float >= 15:                return 1            else:                return 0        """                arcpy.CalculateField_management(outfeature, fieldname5, expression5, "PYTHON3", codeblock5)        fieldname6 = "elderly_ratio"        fieldname7 = "elderly_score"        arcpy.AddField_management(outfeature, fieldname6 , "DOUBLE", 18,11)        arcpy.AddField_management(outfeature, fieldname7 , "Short")        expression6 = "!" + elderly + "!/!" + adults + "!"        expression7 = "score(!elderly_ratio!)"        codeblock7 = """def score(ratio):            if ratio >= 0.25:                return 3            elif ratio >= 0.15:                return 2            elif ratio >= 0.1:                return 1            else:                return 0                """        arcpy.CalculateField_management(outfeature, fieldname6, expression6, "PYTHON3")        arcpy.CalculateField_management(outfeature, fieldname7, expression7, "PYTHON3", codeblock7)        fieldname8 = "youth_ratio"        fieldname9 = "youth_score"        arcpy.AddField_management(outfeature, fieldname8 , "DOUBLE", 18,11)        arcpy.AddField_management(outfeature, fieldname9 , "Short")        expression8 = "!" + youth + "!/!" + adults + "!"        expression9 = "score(!youth_ratio!)"        codeblock9 = """def score(ratio):            if ratio >= 0.6:                return 3            elif ratio >= 0.4:                return 2            elif ratio >= 0.2:                return 1            else:                return 0        """        arcpy.CalculateField_management(outfeature, fieldname8, expression8, "PYTHON3")        arcpy.CalculateField_management(outfeature, fieldname9, expression9, "PYTHON3", codeblock9)        fieldname10 = "alco_score"        fieldname11 = "subs_score"        arcpy.AddField_management(outfeature, fieldname10 , "Short")        arcpy.AddField_management(outfeature, fieldname11 , "Short")        expression10 = "score(!" + alcohol +"!)"        expression11 = "score(!" + substance +"!)"        codeblock10 = """def score(misuse):            if misuse > 0:                return 1            else:                return 0        """        arcpy.CalculateField_management(outfeature, fieldname10, expression10, "PYTHON3", codeblock10)        arcpy.CalculateField_management(outfeature, fieldname11, expression11, "PYTHON3", codeblock10)        #############################################        #calculate NSC score        nsc_score = "nsc_score"        arcpy.AddField_management(outfeature, nsc_score , "SHORT", 18,11)        if '_' not in field_names:            time = time.replace('.', '_')            distance = distance.replace('.', '_')                    expression12 = "rate(!" + time + "!)"        codeblock12 = """def rate(time):            if time >= 60:                return 5            elif time >= 50:                return 4            elif time >= 40:                return 3            elif time >= 30:                return 2            elif time > 20:                return 1            else:                return 0        """                arcpy.CalculateField_management(outfeature, nsc_score, expression12, "PYTHON3", codeblock12)                #calculate the final scores        arcpy.AddField_management(outfeature, "score" , "SHORT", 18,11)        expression13 = "!pop_score! + !poverty_score! + !elderly_score! + \                            !youth_score! + !alco_score! + !subs_score! + !nsc_score!"        arcpy.CalculateField_management(outfeature, "score", expression13, "PYTHON3")        #add the population:fte constraint        arcpy.AddField_management(outfeature, "pop_fte_contraint" , "SHORT", 18,11)        expression14 = "pop_fte_score(!" + pop + "!,!psy_pop!)"        codeblock14 = """def pop_fte_score(pop,  psy):            ### High needs HPSA            if psy > 20000:                return 1            if psy < 0:                if pop >= 1500:                    return 1            else:                return 0        """        arcpy.CalculateField_management(outfeature, "pop_fte_contraint", expression14, "PYTHON3", codeblock14)        #add the additional constraint for high needs        arcpy.AddField_management(outfeature, "highneeds_contraint" , "SHORT", 18,11)        expression15 = "highneeds_score(!poverty_ratio!,!youth_ratio!,!elderly_ratio!,!alco_score!, !subs_score!)"        codeblock15 = """def highneeds_score(poverty, youth, elderly, alcohol, substance):            ### High needs HPSA            if poverty > 0.2:                return 1            if youth > 0.6:                return 1            if elderly > 0.25:                return 1            if alcohol == 1:                return 1            if substance == 1:                return 1            return 0        """        arcpy.CalculateField_management(outfeature, "highneeds_contraint", expression15, "PYTHON3", codeblock15)        arcpy.AddField_management(outfeature, "HPSA_scores" , "SHORT", 18,11)        expression16 = "!score!*!pop_fte_contraint!*!highneeds_contraint!"        arcpy.CalculateField_management(outfeature, "HPSA_scores", expression16, "PYTHON3")        arcpy.AddField_management(outfeature, "HPSA_scores_CA" , "SHORT", 18,11)        expression17 = "!score!*!pop_fte_contraint!*!highneeds_contraint!*!" + ca_constraint + "!"        arcpy.CalculateField_management(outfeature, "HPSA_scores_CA", expression17, "PYTHON3")                        return    