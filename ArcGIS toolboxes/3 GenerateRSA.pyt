# -*- coding: utf-8 -*-import arcpyarcpy.env.overwriteOutput = Trueclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Create_RSA"        self.alias = "Create_RSA"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Create_RSA"        self.description = "Create RSA and the corresponding population centroids from clustering result"        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #first parameter        param0 = arcpy.Parameter(        displayName="Census Tract",        name="ct_in",        datatype="GPFeatureLayer",        parameterType="Required",        direction="Input")        #second parameter        param1 = arcpy.Parameter(        displayName="cluster table",        name="cluster",        datatype="DETable",        parameterType="Required",        direction="Input")         # Third parameter        param5 = arcpy.Parameter(        displayName="output_rsa",        name="rsa",        datatype="GPFeatureLayer",        parameterType="Required",        direction="Output")                param7 = arcpy.Parameter(        displayName="output population centroid",        name="pop_centroid",        datatype="GPFeatureLayer",        parameterType="Required",        direction="Output")        param8 = arcpy.Parameter(        displayName="Infant Table",        name="infant",        datatype="DETable",        parameterType="Required",        direction="Input")                         params = [param0, param1, param5, param7, param8]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        ct_in = parameters[0].valueAsText #shapefile        cluster_csv = parameters[1].valueAsText #cluster table        outfeature = parameters[2].valueAsText        popcentroid = parameters[3].valueAsText        infant_csv = parameters[4].valueAsText                field_names = [f.name for f in arcpy.ListFields(cluster_csv)]        arcpy.AddMessage(field_names)        clu_id = field_names[-1]        arcpy.AddMessage("Clu id: {}.".format(clu_id))                #get the name of each layer        if '.shp' in ct_in:            ct_name = ct_in.split("\\")[-1][:-4]        else:            ct_name = ct_in.split("\\")[-1]        infant_name = "ct_infant"                #intermediate joined file        ct_joined = "ct_joined"        #convert the cluster csv to a gdb table        clu_name = "cluster"        clusterid = clu_name + "_" + clu_id        arcpy.TableToTable_conversion(cluster_csv,arcpy.env.workspace,clu_name)        #add str field for the input cluster table        arcpy.AddField_management(clu_name, "ct_text" , "Text")        arcpy.CalculateField_management(clu_name, "ct_text", "str(int(!ct!))", "PYTHON3")        count = arcpy.GetCount_management(ct_in)        arcpy.AddMessage(count)                #Join cluster        joined_features = arcpy.management.AddJoin(ct_in, "GEOID", clu_name, "ct_text", join_type = "KEEP_COMMON")        count = arcpy.GetCount_management(ct_in)        arcpy.AddMessage(count)        arcpy.AddMessage([f.name for f in arcpy.ListFields(joined_features)])        count = arcpy.GetCount_management(joined_features)        arcpy.AddMessage(count)        #generate pop weighted centroid        arcpy.MeanCenter_stats(joined_features, popcentroid,'.'.join([ct_name,"pop"]),'.'.join([clu_name,clu_id]))                #Join Infant Data        #convert the infant csv to a gdb table        infant = 'ct_infant'        arcpy.TableToTable_conversion(infant_csv,arcpy.env.workspace,infant)        #add str field for the input infant table        arcpy.AddField_management(infant, "GEOID" , "Text")        arcpy.CalculateField_management(infant, "GEOID", "str(int(!ct!))", "PYTHON3")        ct_geoid = ct_name + ".GEOID"        joined_features = arcpy.management.AddJoin(joined_features,ct_geoid, infant, "GEOID")                arcpy.management.CopyFeatures(joined_features, ct_joined)        #dissolve        ct_fields = ['pop','poverty','pop_lwinc', 'youth', 'adults', 'elderly', 'white','black', 'native', 'asian',\                     'hawaiian','hispanic','white_noh','pc_claims','pc_fte', 'pc_lwinc','psy_fte','dh_lwinc']        ift_fields = ['ct_n_birth', 'ct_n_lbw', 'ct_n_dth']                sum_fields = ['_'.join([ct_name,field]) for field in ct_fields] + ['_'.join([infant, field]) for field in ift_fields]            stat_fields = []        for item in sum_fields:            cur = [item,"SUM"]            stat_fields.append(cur)        stat_fields.append(['_'.join([ct_name,"alcohol"]),"MEAN"])        stat_fields.append(['_'.join([ct_name,"substance"]),"MEAN"])        stat_fields.append(['_'.join([ct_name,"water_pop"]),"MIN"])        out_dissolved = 'dissolved'                arcpy.AddMessage(stat_fields)        field_names = [f.name for f in arcpy.ListFields(ct_joined)]        arcpy.AddMessage(field_names)        arcpy.Dissolve_management(ct_joined, outfeature, clusterid, stat_fields)        return'''        #after dissolve: sum some fields including pop, poverty, female pop, lbw, birth, ect.        #add FTE to each RSA        #create a field mapping #reference:https://pro.arcgis.com/en/pro-app/latest/tool-reference/analysis/spatial-join.htm         fieldmappings = arcpy.FieldMappings()        fieldmappings.addTable(out_dissolved)        fieldmappings.addTable(primary)                FteFieldIndex = fieldmappings.findFieldMapIndex("FTE")        fieldmap = fieldmappings.getFieldMap(FteFieldIndex)        field = fieldmap.outputField        field.name = "SUM_fte"        field.aliasName = "SUM_fte"        fieldmap.outputField = field        fieldmap.mergeRule = "sum"        fieldmappings.replaceFieldMap(FteFieldIndex, fieldmap)        FteFieldIndex2 = fieldmappings.findFieldMapIndex("FTE_lwinc")        fieldmap = fieldmappings.getFieldMap(FteFieldIndex2)        field = fieldmap.outputField        field.name = "SUM_fte_lwinc"        field.aliasName = "SUM_fte_lwinc"        fieldmap.outputField = field        fieldmap.mergeRule = "sum"        fieldmappings.replaceFieldMap(FteFieldIndex2, fieldmap)                #delete unnecessary field        field_names = [f.name for f in arcpy.ListFields(primary)]        for name in field_names:            try:                x = fieldmappings.findFieldMapIndex(name)                fieldmappings.removeFieldMap(x)            except:                arcpy.AddMessage("name: {}".format(name))                continue        intermediate = 'rsa_intermeidate'        arcpy.SpatialJoin_analysis(out_dissolved, primary, outfeature, "JOIN_ONE_TO_ONE", \                                   field_mapping = fieldmappings, match_option = "COMPLETELY_CONTAINS")        arcpy.Delete_management(out_dissolved)                fieldmappings = arcpy.FieldMappings()        fieldmappings.addTable(intermediate)        fieldmappings.addTable(mental)                FteFieldIndex = fieldmappings.findFieldMapIndex("Core_FTE")        fieldmap = fieldmappings.getFieldMap(FteFieldIndex)        field = fieldmap.outputField        field.name = "core_fte"        field.aliasName = "core_fte"        fieldmap.outputField = field        fieldmap.mergeRule = "sum"        fieldmappings.replaceFieldMap(FteFieldIndex, fieldmap)        FteFieldIndex2 = fieldmappings.findFieldMapIndex("psy_FTE")        fieldmap = fieldmappings.getFieldMap(FteFieldIndex2)        field = fieldmap.outputField        field.name = "psy_fte"        field.aliasName = "psy_fte"        fieldmap.outputField = field        fieldmap.mergeRule = "sum"        fieldmappings.replaceFieldMap(FteFieldIndex2, fieldmap)                #delete unnecessary field        field_names = [f.name for f in arcpy.ListFields(mental)]        for name in field_names:            if 'Core' in name or 'psy' in name:                continue            try:                x = fieldmappings.findFieldMapIndex(name)                fieldmappings.removeFieldMap(x)            except:                arcpy.AddMessage("name: {}".format(name))                continue        arcpy.SpatialJoin_analysis(intermediate, mental, outfeature, "JOIN_ONE_TO_ONE", \                                   field_mapping = fieldmappings, match_option = "COMPLETELY_CONTAINS")        arcpy.Delete_management(intermediate)        #output:        #RSA with FTE sum'''